// vite.config.ts
import { defineConfig } from "vite";
import vue from "@vitejs/plugin-vue";
import path from "path";
import vueJsx from "@vitejs/plugin-vue-jsx";
import { createSvgIconsPlugin } from "vite-plugin-svg-icons";
import VueSetupExtend from "vite-plugin-vue-setup-extend";
import { createHtmlPlugin } from "vite-plugin-html";
import AutoImport from "unplugin-auto-import/vite";
import Components from "unplugin-vue-components/vite";
import { ElementPlusResolver } from "unplugin-vue-components/resolvers";
import legacy from "@vitejs/plugin-legacy";
import { viteStaticCopy } from "vite-plugin-static-copy";
var __vite_injected_original_dirname = "E:\\devTest\\vue3-element-admin-simple";
var vite_config_default = defineConfig(({ command, mode }) => {
  return {
    base: "./",
    plugins: [
      vue(),
      vueJsx(),
      viteStaticCopy({
        targets: [{ src: "config/index-prod.js", dest: "config/" }]
      }),
      legacy({
        targets: ["defaults", "not IE 11"],
        additionalLegacyPolyfills: ["regenerator-runtime/runtime"]
      }),
      createSvgIconsPlugin({
        iconDirs: [path.resolve(process.cwd(), "src/icons/svg")],
        symbolId: "icon-[dir]-[name]"
      }),
      VueSetupExtend(),
      createHtmlPlugin({
        inject: {
          data: {
            urlScript: `${mode == "development" ? "dev" : "prod"}`
          }
        }
      }),
      AutoImport({
        resolvers: [ElementPlusResolver()]
      }),
      Components({
        resolvers: [
          ElementPlusResolver({
            importStyle: "sass"
          })
        ]
      })
    ],
    resolve: {
      alias: {
        "@": path.resolve(__vite_injected_original_dirname, "src")
      }
    },
    css: {
      preprocessorOptions: {
        scss: {
          additionalData: `@use "@/theme/element-variable.scss" as *;`
        }
      }
    },
    build: {
      outDir: path.join(__vite_injected_original_dirname, "dist"),
      cssCodeSplit: true,
      drop: command === "build" ? ["console", "debugger"] : [],
      rollupOptions: {
        output: {
          sourcemap: false,
          manualChunks: {
            "base-module": ["vue", "vuex", "vue-router", "axios", "lodash-es"],
            "element-plus": ["element-plus"]
          },
          entryFileNames: "js/[name].[hash].js",
          chunkFileNames: "js/[name].[hash].js",
          assetFileNames: "[ext]/[name].[hash].[ext]"
        }
      }
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
